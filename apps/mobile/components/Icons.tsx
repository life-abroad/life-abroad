import React from 'react';
import { Image as ImageRN, View } from 'react-native';
import Svg, { Path, Defs, Pattern, Image, Use } from 'react-native-svg';
const { ImageBackground } = require('react-native');

type IconProps = {
  size?: number;
  width?: number;
  height?: number;
};

const PressableIcon = ({
  onPress,
  children,
}: {
  size: number;
  onPress?: () => void;
  children: React.ReactNode;
}) => {
  return (
    <View className="items-center justify-center" onTouchEnd={onPress}>
      {children}
    </View>
  );
};

const ActiveCircle = ({ size, top }: { size: number; top: number }) => {
  return (
    <View
      style={{
        position: 'absolute',
        width: Math.round(size * 0.6),
        height: Math.round(size * 0.6),
        borderRadius: Math.round((size * 0.6) / 2),
        left: Math.round((size - Math.round(size * 0.6)) / 2),
        top: Math.round((size - Math.round(size * 0.6)) / 2) + top,
        backgroundColor: '#0055FF',
      }}
    />
  );
};

export const HeartIcon = ({ size }: { size: number }) => {
  return (
    <View className="items-center justify-center">
      <ImageRN
        source={require('../assets/ui-icons/heart-icon.png')}
        resizeMode="contain"
        style={(() => {
          const s = ImageRN.resolveAssetSource(require('../assets/ui-icons/heart-icon.png'));
          return { height: size, aspectRatio: s.width / s.height };
        })()}
      />
    </View>
  );
};

export const CameraIcon = ({ size }: { size: number }) => {
  return (
    <View className="items-center justify-center">
      <ImageRN
        source={require('../assets/ui-icons/camera-icon.png')}
        resizeMode="contain"
        style={(() => {
          const s = ImageRN.resolveAssetSource(require('../assets/ui-icons/camera-icon.png'));
          return { height: size, aspectRatio: s.width / s.height };
        })()}
      />
    </View>
  );
};

export const ShareIcon = ({ size }: { size?: number }) => (
  <View className="items-center justify-center">
    <ImageRN
      source={require('../assets/ui-icons/share-icon.png')}
      resizeMode="contain"
      style={(() => {
        const s = ImageRN.resolveAssetSource(require('../assets/ui-icons/share-icon.png'));
        return { height: size, aspectRatio: s.width / s.height };
      })()}
    />
  </View>
);

export const LocationIcon = ({ size, width, height }: IconProps) => {
  const defaultW = 22;
  const defaultH = 27;
  const w = width ?? size ?? defaultW;
  const h = height ?? (size ? (size * defaultH) / defaultW : defaultH);

  return (
    <Svg width={w} height={h} viewBox="0 0 22 27" fill="none">
      <Path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M11.2607 0.374512C14.1088 0.374512 16.8406 1.50609 18.8545 3.52002C20.8683 5.53394 22 8.26567 22 11.1138C21.9998 19.4661 11.2607 26.6255 11.2607 26.6255C11.2365 26.6093 0.52264 19.4567 0.522461 11.1138C0.522461 8.26565 1.65408 5.53395 3.66797 3.52002C5.68179 1.50628 8.41285 0.37457 11.2607 0.374512ZM11.2607 6.13623C8.32375 6.13643 5.94238 8.5175 5.94238 11.4546C5.94244 14.3916 8.32378 16.7727 11.2607 16.7729C14.1978 16.7729 16.579 14.3917 16.5791 11.4546C16.5791 8.51743 14.1978 6.13631 11.2607 6.13623Z"
        fill="white"
      />
    </Svg>
  );
};

export const ChatBubbleIcon = ({
  size,
  onPress,
  active,
}: {
  size: number;
  onPress: () => void;
  active?: boolean;
}) => {
  return (
    <PressableIcon onPress={onPress} size={size}>
      <View style={{ width: size, height: size, alignItems: 'center', justifyContent: 'center' }}>
        <ImageRN
          source={require('../assets/ui-icons/chat-icon.png')}
          resizeMode="contain"
          style={(() => {
            const s = ImageRN.resolveAssetSource(require('../assets/ui-icons/chat-icon.png'));
            return { height: size, aspectRatio: s.width / s.height };
          })()}
        />
        {active && <ActiveCircle size={size} top={-3} />}
      </View>
    </PressableIcon>
  );
};

export const UserIcon = ({ size, onPress }: { size: number; onPress: () => void }) => {
  return (
    <PressableIcon size={size} onPress={onPress}>
      <ImageRN
        source={require('../assets/ui-icons/user-icon.png')}
        resizeMode="contain"
        style={(() => {
          const s = ImageRN.resolveAssetSource(require('../assets/ui-icons/user-icon.png'));
          return { height: size, aspectRatio: s.width / s.height };
        })()}
      />
    </PressableIcon>
  );
};

export const CircleIconNav = ({
  size,
  active,
  onPress,
}: {
  size: number;
  active: boolean;
  onPress: () => void;
}) => {
  return (
    <PressableIcon onPress={onPress} size={size}>
      <View style={{ width: size, height: size, alignItems: 'center', justifyContent: 'center' }}>
        <ImageRN
          source={require('../assets/textures/snow.png')}
          resizeMode="cover"
          style={{ height: size, width: size, borderRadius: size / 2, backgroundColor: 'white' }}
        />
        {active && <ActiveCircle size={size} />}
      </View>
    </PressableIcon>
  );
};

// Text Logo
export const CircleLogo = ({ size, width, height }: IconProps) => {
  const defaultW = 94;
  const defaultH = 25;
  const w = width ?? size ?? defaultW;
  const h = height ?? (size ? Math.round((size * defaultH) / defaultW) : defaultH); // keep aspect ratio if size provided

  return (
    <Svg width={w} height={h} viewBox="0 0 94 25" fill="none">
      <Path
        d="M12.1698 24.0119C9.65024 24.0119 7.49399 23.5255 5.70102 22.5529C3.91977 21.5802 2.55453 20.215 1.60532 18.4572C0.667816 16.6877 0.199066 14.631 0.199066 12.2873C0.199066 9.89664 0.685394 7.82242 1.65805 6.06461C2.63071 4.29508 3.99008 2.92398 5.73618 1.95133C7.48227 0.978672 9.50961 0.492344 11.8182 0.492344C13.1424 0.492344 14.3846 0.732578 15.5448 1.21305C16.7049 1.6818 17.7303 2.4318 18.6209 3.46305L18.9901 0.931797H21.0116V7.84H18.9725C18.8202 6.21109 18.1288 4.91031 16.8983 3.93766C15.6795 2.965 14.0741 2.47867 12.0819 2.47867C10.3709 2.47867 8.88266 2.87711 7.61703 3.67398C6.35141 4.45914 5.37289 5.58414 4.68149 7.04898C3.99008 8.50211 3.64438 10.2248 3.64438 12.217C3.64438 14.2326 3.99008 15.9728 4.68149 17.4377C5.37289 18.9025 6.35141 20.0275 7.61703 20.8127C8.88266 21.5978 10.3709 21.9904 12.0819 21.9904C14.4959 21.9904 16.3241 21.5685 17.5663 20.7248C18.8084 19.881 19.4413 18.3107 19.4647 16.0138L21.5038 16.3654L21.328 20.9181C19.91 22.1252 18.4393 22.9455 16.9159 23.3791C15.3924 23.8009 13.8104 24.0119 12.1698 24.0119ZM24.0174 23.59V21.9904C24.8729 21.9904 25.4764 21.9611 25.828 21.9025C26.1913 21.8322 26.4139 21.715 26.4959 21.5509C26.578 21.3869 26.619 21.1525 26.619 20.8478V10.0724C26.619 9.7443 26.4315 9.5568 26.0565 9.50992C25.6815 9.46305 25.0311 9.43375 24.1053 9.42203C24.1053 9.1525 24.1053 8.88883 24.1053 8.63102C24.1053 8.3732 24.1053 8.11539 24.1053 7.85758C24.5858 7.85758 25.0545 7.85758 25.5116 7.85758C25.9686 7.85758 26.4139 7.85172 26.8475 7.84C27.3163 7.82828 27.7733 7.81656 28.2186 7.80484C28.6639 7.79313 29.1151 7.78141 29.5721 7.76969V20.9181C29.5721 21.4455 29.7713 21.756 30.1698 21.8498C30.5799 21.9435 31.2596 21.9904 32.2088 21.9904V23.59C31.9041 23.59 31.494 23.59 30.9784 23.59C30.4745 23.5783 29.953 23.5724 29.4139 23.5724C28.8866 23.5724 28.4295 23.5724 28.0428 23.5724C27.6561 23.5607 27.4276 23.5548 27.3573 23.5548C26.701 23.5548 26.1151 23.5607 25.5995 23.5724C25.0838 23.5841 24.5565 23.59 24.0174 23.59ZM27.9549 4.39469C27.4393 4.39469 27.0233 4.24234 26.7069 3.93766C26.4022 3.63297 26.2498 3.23453 26.2498 2.74234C26.2498 2.25016 26.4022 1.85758 26.7069 1.56461C27.0233 1.27164 27.4334 1.12516 27.9373 1.12516C28.453 1.12516 28.8631 1.27164 29.1678 1.56461C29.4725 1.85758 29.6248 2.25602 29.6248 2.75992C29.6248 3.24039 29.4725 3.63297 29.1678 3.93766C28.8631 4.24234 28.4588 4.39469 27.9549 4.39469ZM33.7206 23.59V21.9904C34.6229 21.9904 35.2616 21.9611 35.6366 21.9025C36.0116 21.8439 36.2401 21.7326 36.3221 21.5685C36.4041 21.4045 36.4452 21.1642 36.4452 20.8478V10.2306C36.4452 9.82047 36.2811 9.58609 35.953 9.5275C35.6366 9.45719 34.9217 9.42203 33.8084 9.42203V7.85758C33.9842 7.85758 34.2655 7.85758 34.6522 7.85758C35.0506 7.85758 35.4198 7.86344 35.7596 7.87516C36.0995 7.87516 36.2694 7.87516 36.2694 7.87516C36.7498 7.87516 37.242 7.86344 37.7459 7.84C38.2498 7.81656 38.7655 7.79898 39.2928 7.78727V10.9865C39.8553 9.89664 40.6405 9.04117 41.6483 8.42008C42.6561 7.79898 43.8397 7.48844 45.1991 7.48844C45.7264 7.48844 46.2596 7.52359 46.7987 7.59391V11.4259C46.6229 11.4259 46.4471 11.4259 46.2713 11.4259C46.0956 11.4259 45.9198 11.4259 45.744 11.4259C45.5096 10.8634 45.2166 10.4181 44.8651 10.09C44.5252 9.75016 44.0448 9.58023 43.4237 9.58023C42.2752 9.58023 41.326 10.1193 40.576 11.1974C39.8377 12.2755 39.4569 13.6701 39.4334 15.381C39.4334 15.381 39.4334 15.5685 39.4334 15.9435C39.4334 16.3068 39.4334 16.7638 39.4334 17.3146C39.4334 17.8537 39.4334 18.4045 39.4334 18.967C39.4334 19.5177 39.4334 19.9865 39.4334 20.3732C39.4334 20.7599 39.4334 20.9709 39.4334 21.006C39.4334 21.5099 39.6502 21.8029 40.0838 21.8849C40.5174 21.9552 41.3026 21.9904 42.4393 21.9904V23.59C41.701 23.59 40.9803 23.5841 40.2772 23.5724C39.5741 23.5607 38.7186 23.5548 37.7108 23.5548C36.8436 23.5548 36.117 23.5607 35.5311 23.5724C34.9569 23.5841 34.3534 23.59 33.7206 23.59ZM56.6248 24.0822C54.9959 24.0822 53.5721 23.7423 52.3534 23.0627C51.1346 22.3713 50.1913 21.4103 49.5233 20.1798C48.8553 18.9377 48.5213 17.4904 48.5213 15.838C48.5213 14.2677 48.8495 12.8615 49.5057 11.6193C50.162 10.3654 51.0702 9.37516 52.2303 8.64859C53.3905 7.92203 54.7323 7.55875 56.2557 7.55875C57.2049 7.55875 58.1014 7.6818 58.9452 7.92789C59.8006 8.17398 60.5096 8.64273 61.0721 9.33414L61.5116 7.94547C61.5702 7.94547 61.7166 7.95133 61.951 7.96305C62.1971 7.96305 62.4373 7.96305 62.6717 7.96305C62.9178 7.96305 63.0702 7.96891 63.1288 7.98063V13.465H61.4061C61.3592 12.0588 60.9373 11.0099 60.1405 10.3185C59.3553 9.62711 58.2831 9.28141 56.9237 9.28141C55.2596 9.28141 53.9588 9.85563 53.0213 11.0041C52.0956 12.1525 51.6327 13.7228 51.6327 15.715C51.6327 17.7306 52.1131 19.3302 53.0741 20.5138C54.035 21.6857 55.3299 22.2716 56.9588 22.2716C58.1307 22.2716 59.1092 21.9611 59.8944 21.34C60.6913 20.7072 61.2479 19.8166 61.5643 18.6681L63.6209 19.0197C63.2577 20.6252 62.4608 21.8732 61.2303 22.7638C60.0116 23.6427 58.4764 24.0822 56.6248 24.0822ZM65.6073 23.59C65.6073 23.4963 65.6073 23.3791 65.6073 23.2384C65.6073 23.0978 65.6014 22.9513 65.5897 22.799C65.5897 22.6349 65.5897 22.4826 65.5897 22.342C65.5897 22.2013 65.5897 22.0841 65.5897 21.9904C66.4803 21.9904 67.1073 21.9377 67.4706 21.8322C67.8338 21.7267 68.0506 21.5685 68.1209 21.3576C68.203 21.1466 68.244 20.883 68.244 20.5666V3.34C68.244 2.90641 68.0213 2.65445 67.576 2.58414C67.1307 2.51383 66.4979 2.47281 65.6776 2.46109V0.879063C65.994 0.879063 66.2987 0.879063 66.5916 0.879063C66.8846 0.867344 67.1776 0.861485 67.4706 0.861485C67.7752 0.861485 68.0741 0.861485 68.367 0.861485C68.8123 0.849766 69.2635 0.843906 69.7206 0.843906C70.1893 0.832188 70.6756 0.820469 71.1795 0.80875V20.7599C71.1795 21.3341 71.4022 21.6857 71.8475 21.8146C72.3045 21.9318 72.9842 21.9904 73.8866 21.9904V23.59C73.242 23.59 72.5975 23.59 71.953 23.59C71.3202 23.5783 70.5702 23.5666 69.703 23.5548C68.8475 23.5548 68.1092 23.5607 67.4881 23.5724C66.867 23.5841 66.2401 23.59 65.6073 23.59ZM85.2245 24.0822C83.4549 24.0822 81.9315 23.7365 80.6541 23.0451C79.3885 22.3537 78.4159 21.3869 77.7362 20.1447C77.0565 18.8908 76.7166 17.4318 76.7166 15.7677C76.7166 14.0802 77.0623 12.6095 77.7538 11.3556C78.4452 10.1017 79.4178 9.12906 80.6717 8.43766C81.9256 7.73453 83.3846 7.38297 85.0487 7.38297C86.7362 7.38297 88.1893 7.72867 89.4081 8.42008C90.6268 9.09977 91.5643 10.09 92.2206 11.3908C92.8885 12.6798 93.2284 14.2326 93.2401 16.049L92.1854 16.3654H79.7401C79.7635 18.2404 80.3084 19.7111 81.3748 20.7775C82.453 21.8439 83.8709 22.3771 85.6288 22.3771C86.8475 22.3771 87.9139 22.1369 88.828 21.6564C89.742 21.1642 90.4159 20.3556 90.8495 19.2306H92.9764C92.5077 20.8361 91.5877 22.049 90.2166 22.8693C88.8456 23.6779 87.1815 24.0822 85.2245 24.0822ZM79.7577 14.8361H90.3924C90.2518 13.0431 89.7186 11.6369 88.7928 10.6173C87.8788 9.59781 86.6424 9.08805 85.0838 9.08805C83.5956 9.08805 82.3827 9.60367 81.4452 10.6349C80.5194 11.6662 79.9569 13.0666 79.7577 14.8361Z"
        fill="white"
      />
    </Svg>
  );
};
