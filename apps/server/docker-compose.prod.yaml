services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - "5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    restart: always
    expose:
      - "9000"
      - "9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "${MINIO_HEALTHCHECK_URL}"]
      interval: 5s
      timeout: 5s
      retries: 3

  server:
    build: ./
    container_name: life-abroad_server
    expose:
      - "8000"
    volumes:
      - ./src:/src
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_EXTERNAL_ENDPOINT=${MINIO_EXTERNAL_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - MINIO_SECURE=${MINIO_SECURE}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
      - VONAGE_API_KEY=${VONAGE_API_KEY}
      - VONAGE_API_SECRET=${VONAGE_API_SECRET}
      - SMS_FROM_NUMBER=${SMS_FROM_NUMBER}
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy

  frontend:
    build: ../frontend
    container_name: life-abroad_frontend
    expose:
      - "3000"
    volumes:
      - ../frontend/src:/app/src
      - ../frontend/public:/app/public
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_ALLOWED_HOSTS=${VITE_ALLOWED_HOSTS}
    depends_on:
      - server

  cloudflared:
    image: cloudflare/cloudflared:2024.6.1
    restart: unless-stopped
    command: tunnel --config /etc/cloudflared/config.yaml run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    volumes:
      - ./tunnel-config.yaml:/etc/cloudflared/config.yaml:ro
    depends_on:
      - server
      - frontend

volumes:
  db_data:
  minio_data: